-------------------------------------------------------------------------------
-- TABLES DE ENTIDADES
--------------------------------------------------------------------------------
CREATE TABLE PERSON(
  ID_PERSON NUMBER(4) GENERATED ALWAYS AS IDENTITY,
  FIRST_NAME VARCHAR(30),
  LAST_NAME VARCHAR(30),
  DNI NUMBER(8),
  PHONE NUMBER(9),
  ADDRESS VARCHAR(200),
  EMAIL VARCHAR(200) 
);

CREATE TABLE STUDENT(
  ID_PERSON NUMBER(4),
  CODE_STUDENT CHARACTER(8),
  ID_SCHOOL NUMBER(4)
);

CREATE TABLE TEACHER(
  ID_PERSON NUMBER(4),
  CODE_TEACHER CHARACTER(8)
);

CREATE TABLE DIRECTOR(
  ID_PERSON NUMBER(4),
  CODE_DIRECTOR CHARACTER(8),
  ID_FACULTY NUMBER(4)
);

CREATE TABLE FACULTY(
  ID_FACULTY NUMBER(4) GENERATED ALWAYS AS IDENTITY,
  ID_PERSON NUMBER(4),
  NAME_FACULTY VARCHAR2(50)
);

CREATE TABLE SCHOOL(
    ID_SCHOOL NUMBER(4) GENERATED ALWAYS AS IDENTITY,
    ID_FACULTY NUMBER(4),
    NAME_SCHOOL VARCHAR(50)
);

--------------------------------------------------------------------------------
-- PRIMARY KEY
--------------------------------------------------------------------------------
ALTER TABLE PERSON ADD CONSTRAINT PERSON_PK PRIMARY KEY (ID_PERSON);
ALTER TABLE TEACHER ADD CONSTRAINT TEACHER_PK PRIMARY KEY (ID_PERSON);
ALTER TABLE STUDENT ADD CONSTRAINT PSTUDENT_PK PRIMARY KEY (ID_PERSON);
ALTER TABLE DIRECTOR ADD CONSTRAINT DIRECTOR_PK PRIMARY KEY (ID_PERSON);
ALTER TABLE FACULTY ADD CONSTRAINT FACULTY_PK PRIMARY KEY (ID_FACULTY);
ALTER TABLE SCHOOL ADD CONSTRAINT SCHOOL_PK PRIMARY KEY (ID_SCHOOL);

--------------------------------------------------------------------------------
-- FOREIGN KEY
--------------------------------------------------------------------------------
ALTER TABLE TEACHER ADD FOREIGN KEY (ID_PERSON) REFERENCES PERSON ON DELETE CASCADE;
ALTER TABLE STUDENT ADD FOREIGN KEY (ID_PERSON) REFERENCES PERSON ON DELETE CASCADE;
ALTER TABLE STUDENT ADD FOREIGN KEY (ID_SCHOOL) REFERENCES SCHOOL;
ALTER TABLE DIRECTOR ADD FOREIGN KEY (ID_PERSON) REFERENCES PERSON ON DELETE CASCADE;
ALTER TABLE DIRECTOR ADD FOREIGN KEY (ID_FACULTY) REFERENCES FACULTY;
ALTER TABLE FACULTY ADD FOREIGN KEY (ID_PERSON) REFERENCES PERSON;
ALTER TABLE SCHOOL ADD FOREIGN KEY (ID_FACULTY) REFERENCES FACULTY;

--------------------------------------------------------------------------------
-- UNICIDADE DE ATRIBUTO
--------------------------------------------------------------------------------
ALTER TABLE TEACHER MODIFY (CODE_TEACHER UNIQUE);
ALTER TABLE STUDENT MODIFY (CODE_STUDENT UNIQUE);
ALTER TABLE DIRECTOR MODIFY (CODE_DIRECTOR UNIQUE);

--------------------------------------------------------------------------------
-- NO NULO
--------------------------------------------------------------------------------
ALTER TABLE PERSON MODIFY (FIRST_NAME NOT NULL ENABLE);
ALTER TABLE PERSON MODIFY (LAST_NAME NOT NULL ENABLE);
ALTER TABLE PERSON MODIFY (DNI NOT NULL ENABLE);
ALTER TABLE STUDENT MODIFY (CODE_STUDENT NOT NULL ENABLE);
ALTER TABLE TEACHER MODIFY (CODE_TEACHER NOT NULL ENABLE);
ALTER TABLE DIRECTOR MODIFY (CODE_DIRECTOR NOT NULL ENABLE);
ALTER TABLE FACULTY MODIFY (NAME_FACULTY NOT NULL ENABLE);
ALTER TABLE SCHOOL MODIFY (NAME_SCHOOL NOT NULL ENABLE);


--------------------------------------------------------------------------------
-- CHECK
--------------------------------------------------------------------------------
ALTER TABLE PERSON ADD CONSTRAINT limit_dni CHECK (DNI BETWEEN 10000000 AND 99999999);
ALTER TABLE PERSON ADD CONSTRAINT limit_phone CHECK (PHONE BETWEEN 100000000 AND 999999999);

--------------------------------------------------------------------------------
-- VISTAS
--------------------------------------------------------------------------------
CREATE VIEW LIST_TEACHER 
  AS
  SELECT CODE_TEACHER,FIRST_NAME,LAST_NAME,DNI,PHONE,ADDRESS,EMAIL FROM TEACHER INNER JOIN PERSON ON PERSON.ID_PERSON = TEACHER.ID_PERSON;

CREATE VIEW LIST_STUDENT 
  AS
  SELECT CODE_STUDENT,FIRST_NAME,LAST_NAME,DNI,PHONE,ADDRESS,EMAIL FROM STUDENT INNER JOIN PERSON ON PERSON.ID_PERSON = STUDENT.ID_PERSON;
  
CREATE VIEW LIST_DIRECTOR 
  AS
  SELECT CODE_DIRECTOR,FIRST_NAME,LAST_NAME,DNI,PHONE,ADDRESS,EMAIL FROM DIRECTOR INNER JOIN PERSON ON PERSON.ID_PERSON = DIRECTOR.ID_PERSON;
--------------------------------------------------------------------------------
-- PAQUETES ADMINISTRABLES
--------------------------------------------------------------------------------

------------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO PERSON -----------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_PERSONS AS
  TYPE type_cursor IS REF CURSOR RETURN PERSON%ROWTYPE;
  PROCEDURE INSERT_P (first_n PERSON.FIRST_NAME%TYPE,last_n PERSON.LAST_NAME%TYPE, 
  dni_p PERSON.DNI%TYPE, pho PERSON.PHONE%TYPE, addr PERSON.ADDRESS%TYPE, ema PERSON.EMAIL%TYPE);
  PROCEDURE UPDATE_P (id_p PERSON.ID_PERSON%TYPE, first_n PERSON.FIRST_NAME%TYPE,last_n PERSON.LAST_NAME%TYPE, 
  dni_p PERSON.DNI%TYPE, pho PERSON.PHONE%TYPE, addr PERSON.ADDRESS%TYPE, ema PERSON.EMAIL%TYPE);
  PROCEDURE DELETE_P (id_p PERSON.ID_PERSON%TYPE);
  FUNCTION SEARCH_P (id_p PERSON.ID_PERSON%TYPE) RETURN type_cursor;
  FUNCTION LIST_P RETURN type_cursor;
END PACK_MANAGE_PERSONS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_PERSONS IS
  PROCEDURE INSERT_P (first_n PERSON.FIRST_NAME%TYPE,last_n PERSON.LAST_NAME%TYPE, 
  dni_p PERSON.DNI%TYPE, pho PERSON.PHONE%TYPE, addr PERSON.ADDRESS%TYPE, ema PERSON.EMAIL%TYPE) 
    IS
    BEGIN
      INSERT INTO PERSON (FIRST_NAME, LAST_NAME, DNI, PHONE, ADDRESS, EMAIL) 
      VALUES (first_n, last_n, dni_p, pho, addr, ema);
  END INSERT_P;
  PROCEDURE UPDATE_P (id_p PERSON.ID_PERSON%TYPE, first_n PERSON.FIRST_NAME%TYPE,last_n PERSON.LAST_NAME%TYPE, 
  dni_p PERSON.DNI%TYPE, pho PERSON.PHONE%TYPE, addr PERSON.ADDRESS%TYPE, ema PERSON.EMAIL%TYPE)
    IS
    BEGIN
      UPDATE PERSON SET PERSON.FIRST_NAME = first_n, PERSON.LAST_NAME = last_n, PERSON.DNI = dni_p, PERSON.PHONE = pho,
      PERSON.ADDRESS = addr, PERSON.EMAIL = ema
      where ID_PERSON = id_p;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_P;
  PROCEDURE DELETE_P (id_p PERSON.ID_PERSON%TYPE)
    IS
    BEGIN
      DELETE FROM PERSON WHERE ID_PERSON = id_p;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_P;
  FUNCTION SEARCH_P (id_p PERSON.ID_PERSON%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_PERSONS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM PERSON WHERE ID_PERSON = id_p;
      RETURN cursor1;
  END SEARCH_P;
  FUNCTION LIST_P RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_PERSONS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM PERSON;
      RETURN cursor1;
  END LIST_P;
END PACK_MANAGE_PERSONS;
--------------------------------------------------------------------------------
-- PAQUETES ADMINISTRABLES
--------------------------------------------------------------------------------

------------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO TEACHER -----------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_TEACHERS AS
  TYPE type_cursor IS REF CURSOR RETURN TEACHER%ROWTYPE;
  PROCEDURE INSERT_T (id_t TEACHER.ID_PERSON%TYPE, cod_t TEACHER.CODE_TEACHER%TYPE);
  PROCEDURE UPDATE_T (id_t TEACHER.ID_PERSON%TYPE, cod_t TEACHER.CODE_TEACHER%TYPE);
  PROCEDURE DELETE_T (id_t TEACHER.ID_PERSON%TYPE);
  FUNCTION SEARCH_T (id_t TEACHER.ID_PERSON%TYPE) RETURN type_cursor;
  FUNCTION LIST_T RETURN type_cursor;
END PACK_MANAGE_TEACHERS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_TEACHERS IS
  PROCEDURE INSERT_T (id_t TEACHER.ID_PERSON%TYPE, cod_t TEACHER.CODE_TEACHER%TYPE) 
    IS
    BEGIN
      INSERT INTO TEACHER (ID_PERSON, CODE_TEACHER) VALUES (id_t, cod_t);
  END INSERT_T;
  PROCEDURE UPDATE_T (id_t TEACHER.ID_PERSON%TYPE, cod_t TEACHER.CODE_TEACHER%TYPE)
    IS
    BEGIN
      UPDATE TEACHER SET TEACHER.CODE_TEACHER = cod_t where ID_PERSON = id_t;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_T;
  PROCEDURE DELETE_T (id_t TEACHER.ID_PERSON%TYPE)
    IS
    BEGIN
      DELETE FROM TEACHER WHERE ID_PERSON = id_t;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_T;
  FUNCTION SEARCH_T (id_t TEACHER.ID_PERSON%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_TEACHERS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM TEACHER WHERE ID_PERSON = id_t;
      RETURN cursor1;
  END SEARCH_T;
  FUNCTION LIST_T RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_TEACHERS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM TEACHER;
      RETURN cursor1;
  END LIST_T;
END PACK_MANAGE_TEACHERS;
  
--------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO STUDENT ---------------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_STUDENTS AS
  TYPE type_cursor IS REF CURSOR RETURN STUDENT%ROWTYPE;
  PROCEDURE INSERT_S (id_s STUDENT.ID_PERSON%TYPE, cod_s STUDENT.CODE_STUDENT%TYPE, id_sc STUDENT.ID_SCHOOL%TYPE);
  PROCEDURE UPDATE_S (id_s STUDENT.ID_PERSON%TYPE, cod_s STUDENT.CODE_STUDENT%TYPE, id_sc STUDENT.ID_SCHOOL%TYPE);
  PROCEDURE DELETE_S (id_s STUDENT.ID_PERSON%TYPE);
  FUNCTION SEARCH_S (id_s STUDENT.ID_PERSON%TYPE) RETURN type_cursor;
  FUNCTION LIST_S RETURN type_cursor;
END PACK_MANAGE_STUDENTS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_STUDENTS IS
  PROCEDURE INSERT_S (id_s STUDENT.ID_PERSON%TYPE, cod_s STUDENT.CODE_STUDENT%TYPE, id_sc STUDENT.ID_SCHOOL%TYPE)
    IS
    BEGIN
      INSERT INTO STUDENT (ID_PERSON, CODE_STUDENT, ID_SCHOOL) VALUES (id_s, cod_s, id_sc);
  END INSERT_S;
  PROCEDURE UPDATE_S (id_s STUDENT.ID_PERSON%TYPE, cod_s STUDENT.CODE_STUDENT%TYPE, id_sc STUDENT.ID_SCHOOL%TYPE)
    IS
    BEGIN
      UPDATE STUDENT SET STUDENT.CODE_STUDENT = cod_s, STUDENT.ID_SCHOOL = id_sc where ID_PERSON = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_S;
  PROCEDURE DELETE_S (id_s STUDENT.ID_PERSON%TYPE)
    IS
    BEGIN
      DELETE FROM STUDENT WHERE ID_PERSON = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_S;
  FUNCTION SEARCH_S (id_s STUDENT.ID_PERSON%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_STUDENTS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM STUDENT WHERE ID_PERSON = id_s;
      RETURN cursor1;
  END SEARCH_S;
  FUNCTION LIST_S RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_STUDENTS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM STUDENT;
      RETURN cursor1;
  END LIST_S;
END PACK_MANAGE_STUDENTS;

---------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO DIRECTOR -------------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_DIRECTORS AS
  TYPE type_cursor IS REF CURSOR RETURN DIRECTOR%ROWTYPE;
  PROCEDURE INSERT_D (id_d DIRECTOR.ID_PERSON%TYPE, cod_d DIRECTOR.CODE_DIRECTOR%TYPE, id_f DIRECTOR.ID_FACULTY%TYPE);
  PROCEDURE UPDATE_D (id_d DIRECTOR.ID_PERSON%TYPE, cod_d DIRECTOR.CODE_DIRECTOR%TYPE, id_f DIRECTOR.ID_FACULTY%TYPE);
  PROCEDURE DELETE_D (id_d DIRECTOR.ID_PERSON%TYPE);
  FUNCTION SEARCH_D (id_d DIRECTOR.ID_PERSON%TYPE) RETURN type_cursor;
  FUNCTION LIST_D RETURN type_cursor;
END PACK_MANAGE_DIRECTORS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_DIRECTORS IS
  PROCEDURE INSERT_D (id_d DIRECTOR.ID_PERSON%TYPE, cod_d DIRECTOR.CODE_DIRECTOR%TYPE, id_f DIRECTOR.ID_FACULTY%TYPE)
    IS
    BEGIN
      INSERT INTO DIRECTOR (ID_PERSON, CODE_DIRECTOR, ID_FACULTY) VALUES (id_d, cod_d, id_f);
  END INSERT_D;
  PROCEDURE UPDATE_D (id_d DIRECTOR.ID_PERSON%TYPE, cod_d DIRECTOR.CODE_DIRECTOR%TYPE, id_f DIRECTOR.ID_FACULTY%TYPE)
    IS
    BEGIN
      UPDATE DIRECTOR SET DIRECTOR.CODE_DIRECTOR = cod_d, DIRECTOR.ID_FACULTY = id_f where ID_PERSON = id_d;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_D;
  PROCEDURE DELETE_D (id_d DIRECTOR.ID_PERSON%TYPE)
    IS
    BEGIN
      DELETE FROM DIRECTOR WHERE ID_PERSON = id_d;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_D;
  FUNCTION SEARCH_D (id_d DIRECTOR.ID_PERSON%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_DIRECTORS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM DIRECTOR WHERE ID_PERSON = id_d;
      RETURN cursor1;
  END SEARCH_D;
  FUNCTION LIST_D RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_DIRECTORS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM DIRECTOR;
      RETURN cursor1;
  END LIST_D;
END PACK_MANAGE_DIRECTORS;

---------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO FACULTY -------------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_FACULTIES AS
  TYPE type_cursor IS REF CURSOR RETURN FACULTY%ROWTYPE;
  PROCEDURE INSERT_F (name_f FACULTY.NAME_FACULTY%TYPE, id_p FACULTY.ID_PERSON%TYPE);
  PROCEDURE UPDATE_F (id_f FACULTY.ID_FACULTY%TYPE, name_f FACULTY.NAME_FACULTY%TYPE, id_p FACULTY.ID_PERSON%TYPE);
  PROCEDURE DELETE_F (id_f FACULTY.ID_FACULTY%TYPE);
  FUNCTION SEARCH_F (id_f FACULTY.ID_FACULTY%TYPE) RETURN type_cursor;
  FUNCTION LIST_F RETURN type_cursor;
END PACK_MANAGE_FACULTIES;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_FACULTIES IS
  PROCEDURE INSERT_F (name_f FACULTY.NAME_FACULTY%TYPE, id_p FACULTY.ID_PERSON%TYPE)
    IS
    BEGIN
      INSERT INTO FACULTY (NAME_FACULTY, ID_PERSON) VALUES (name_f, id_p);
  END INSERT_F;
  PROCEDURE UPDATE_F (id_f FACULTY.ID_FACULTY%TYPE, name_f FACULTY.NAME_FACULTY%TYPE, id_p FACULTY.ID_PERSON%TYPE)
    IS
    BEGIN
      UPDATE FACULTY SET FACULTY.NAME_FACULTY = name_f, FACULTY.ID_PERSON = id_p where ID_FACULTY = id_f;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_F;
  PROCEDURE DELETE_F (id_f FACULTY.ID_FACULTY%TYPE)
    IS
    BEGIN
      DELETE FROM FACULTY WHERE ID_FACULTY = id_f;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_F;
  FUNCTION SEARCH_F (id_f FACULTY.ID_FACULTY%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_FACULTIES.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM FACULTY WHERE ID_FACULTY = id_f;
      RETURN cursor1;
  END SEARCH_F;
  FUNCTION LIST_F RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_FACULTIES.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM FACULTY;
      RETURN cursor1;
  END LIST_F;
END PACK_MANAGE_FACULTIES;
  
---------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO SCHOOL -------------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_SCHOOLS AS
  TYPE type_cursor IS REF CURSOR RETURN SCHOOL%ROWTYPE;
  PROCEDURE INSERT_S (name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE);
  PROCEDURE UPDATE_S (id_s SCHOOL.ID_SCHOOL%TYPE, name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE);
  PROCEDURE DELETE_S (id_s SCHOOL.ID_SCHOOL%TYPE);
  FUNCTION SEARCH_S (id_s SCHOOL.ID_SCHOOL%TYPE) RETURN type_cursor;
  FUNCTION LIST_S RETURN type_cursor;
END PACK_MANAGE_SCHOOLS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_SCHOOLS IS
  PROCEDURE INSERT_S (name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE)
    IS
    BEGIN
      INSERT INTO SCHOOL (NAME_SCHOOL, ID_FACULTY) VALUES (name_s, id_f);
  END INSERT_S;
  PROCEDURE UPDATE_S (id_s SCHOOL.ID_SCHOOL%TYPE, name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE)
    IS
    BEGIN
      UPDATE SCHOOL SET SCHOOL.NAME_SCHOOL = name_s, SCHOOL.ID_FACULTY = id_f where ID_SCHOOL = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_S;
  PROCEDURE DELETE_S (id_s SCHOOL.ID_SCHOOL%TYPE)
    IS
    BEGIN
      DELETE FROM SCHOOL WHERE ID_FACULTY = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_S;
  FUNCTION SEARCH_S (id_s SCHOOL.ID_SCHOOL%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_SCHOOLS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM SCHOOL WHERE ID_SCHOOL = id_s;
      RETURN cursor1;
  END SEARCH_S;
  FUNCTION LIST_S RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_SCHOOLS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM SCHOOL;
      RETURN cursor1;
  END LIST_S;
END PACK_MANAGE_SCHOOLS;
  
---------- CREACION DE PROCEDIMIENTOS MANTENIMIENTO SCHOOL -------------------
CREATE OR REPLACE PACKAGE PACK_MANAGE_SCHOOLS AS
  TYPE type_cursor IS REF CURSOR RETURN SCHOOL%ROWTYPE;
  PROCEDURE INSERT_S (name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE);
  PROCEDURE UPDATE_S (id_s SCHOOL.ID_SCHOOL%TYPE, name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE);
  PROCEDURE DELETE_S (id_s SCHOOL.ID_SCHOOL%TYPE);
  FUNCTION SEARCH_S (id_s SCHOOL.ID_SCHOOL%TYPE) RETURN type_cursor;
  FUNCTION LIST_S RETURN type_cursor;
END PACK_MANAGE_SCHOOLS;

CREATE OR REPLACE PACKAGE BODY PACK_MANAGE_SCHOOLS IS
  PROCEDURE INSERT_S (name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE)
    IS
    BEGIN
      INSERT INTO SCHOOL (NAME_SCHOOL, ID_FACULTY) VALUES (name_s, id_f);
  END INSERT_S;
  PROCEDURE UPDATE_S (id_s SCHOOL.ID_SCHOOL%TYPE, name_s SCHOOL.NAME_SCHOOL%TYPE, id_f SCHOOL.ID_FACULTY%TYPE)
    IS
    BEGIN
      UPDATE SCHOOL SET SCHOOL.NAME_SCHOOL = name_s, SCHOOL.ID_FACULTY = id_f where ID_SCHOOL = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN
      rollback;
  END UPDATE_S;
  PROCEDURE DELETE_S (id_s SCHOOL.ID_SCHOOL%TYPE)
    IS
    BEGIN
      DELETE FROM SCHOOL WHERE ID_FACULTY = id_s;
      commit;
      EXCEPTION
      WHEN OTHERS THEN 
      rollback;
  END DELETE_S;
  FUNCTION SEARCH_S (id_s SCHOOL.ID_SCHOOL%TYPE) RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_SCHOOLS.type_cursor;
    BEGIN
      OPEN cursor1 FOR
      SELECT * FROM SCHOOL WHERE ID_SCHOOL = id_s;
      RETURN cursor1;
  END SEARCH_S;
  FUNCTION LIST_S RETURN type_cursor
    IS
    cursor1 PACK_MANAGE_SCHOOLS.type_cursor;
    BEGIN
      OPEN cursor1 FOR 
      SELECT * FROM SCHOOL;
      RETURN cursor1;
  END LIST_S;
END PACK_MANAGE_SCHOOLS;
  

